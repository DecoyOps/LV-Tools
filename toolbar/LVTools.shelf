<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="LV_Tools" label="LV Tools">
    <memberTool name="LV_Color"/>
    <memberTool name="LV_Arrange"/>
    <memberTool name="LV_Controller"/>
    <memberTool name="LV_Texture_Abs"/>
    <memberTool name="LV_Add_Remove_Sticky_Note_Parent"/>
    <memberTool name="Open_Project_Folder"/>
    <memberTool name="LV_Wedge_Parm"/>
    <memberTool name="LV_Create_Named_Geo"/>
    <memberTool name="LV_Make_Space"/>
    <memberTool name="Light_Visibility_Listener"/>
    <memberTool name="Updater"/>
    <memberTool name="render_to_mp4"/>
  </toolshelf>

  <tool name="LV_Color" label="LV Color" icon="SOP_color">
    <script scriptType="python"><![CDATA[from LVUtils import colorControl

colorControl()


    ]]></script>
  </tool>

  <tool name="LV_Arrange" label="LV Arrange" icon="$LV/lv.svg">
    <script scriptType="python"><![CDATA[import os

obj = hou.node('/obj')

centerPos = hou.Vector2(0,0)

nodes = hou.selectedNodes()

for index, n in enumerate(nodes):
    if index == 0:
        nodePos = n.position()
        centerPos -= nodePos
    else:
        ss = ""
        fb = ""
        ud = ""

        node = n

        node.setGenericFlag(hou.nodeFlag.DisplayComment,True)

        posx = node.parm('tx').eval()
        posz = node.parm('tz').eval() * -1
        posy = node.parm('ty').eval()

        if node.type().name() == 'rslight':
            intensity = str(node.parm('RSL_intensityMultiplier').eval())
            exposure = str(node.parm('Light1_exposure').eval())
            spread = str(node.parm('RSL_spread').eval())

        pos = hou.Vector2(posx,posz)
        newPos = pos.normalized()
        newPos *= 3 + (pos.length()/12)

        if posx < 0:
            ss = "Left"
        elif posx == 0:
            ss = ""
        else:
            ss = "Right"

        if posz > 0:
            fb = "Back"
        elif posz == 0:
            fb = ""
        else:
            fb = "Front"

        if posy > 0:
            ud = "Top"
        elif posy == 0:
            ud = ""
        else:
            ud = "Bottom"

        node.setPosition(hou.Vector2(newPos[0]-centerPos[0],newPos[1]-centerPos[1]))

        node.setName(ud + fb + ss + "_" + node.type().name(), True)
        if node.type().name() == 'rslight':
            node.setComment('Intensity: ' + intensity + os.linesep +
            'Exposure: ' + exposure + os.linesep +
            'Spread: ' + spread)]]></script>
  </tool>

  <tool name="LV_Controller" label="LV Controller" icon="$LV/lv.svg">
    <script scriptType="python"><![CDATA[from LVUtils import openControls
from imp import reload

openControls()]]></script>
  </tool>

  <tool name="LV_Texture_Abs" label="LV Texture Abs" icon="$LV/lv.svg">
    <script scriptType="python"><![CDATA[import tex
from imp import reload
reload(tex)
tex.createAbs()]]></script>
  </tool>

  <tool name="LV_Copy Ease" label="LV Copy Ease" icon="VOP_clamp">
    <script scriptType="python"><![CDATA[import json
import math

pane_tab = hou.ui.paneTabUnderCursor()
anim_editor = pane_tab.graph()
keyframes = anim_editor.selectedKeyframes()

kfs = []

for parm in keyframes.keys():
    for key in keyframes[parm]:
        kfs.append(key)

#normalize values

foff = kfs[0].frame() -1 #shift set back to 0
fdiff = kfs[1].frame() -  kfs[0].frame() #length of set


for key in kfs:
    #if (key.frame()-1) > 0:
    key.setFrame(math.floor(key.frame() * (hou.fps()/(key.frame()-1) ) ) )

#start saving out
c1 = kfs[0].asJSON(save_keys_in_frames=True)
c2 = kfs[1].asJSON(save_keys_in_frames=True)

#create file
path1 = 'C:/Users/PIC-TWO/Documents/ease/copied1.json'

f = open(path1, 'w')
json.dump(c1, f)
f.close()

path2 = 'C:/Users/PIC-TWO/Documents/ease/copied2.json'

f = open(path2, 'w')
json.dump(c2, f)
f.close()

]]></script>
    <keywordList>
      <keyword>ease</keyword>
      <keyword>copy ease</keyword>
      <keyword>transfer ease</keyword>
    </keywordList>
  </tool>

  <tool name="LV_Paste_Ease" label="LV Paste Ease" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import json

pane_tab = hou.ui.paneTabUnderCursor()
anim_editor = pane_tab.graph()
keyframes = anim_editor.selectedKeyframes()

#load keyframe
path1 = 'C:/Users/PIC-TWO/Documents/ease/copied1.json'
f1 = open(path1, 'r')
c1 = json.load(f1)

path2 = 'C:/Users/PIC-TWO/Documents/ease/copied2.json'
f2 = open(path2, 'r')
c2 = json.load(f2)

kfs = []

i = -1
for parm in keyframes.keys():
    for key in keyframes[parm]:
        i = i + 1
        kfs.append(key)
        if i < 1:

            parm.deleteKeyframeAtFrame(key.frame())
            newKey = hou.Keyframe()
            newKey.fromJSON(c1)
            parm.setKeyframe(newKey)
        else:
            parm.deleteKeyframeAtFrame(key.frame())
            newKey = hou.Keyframe()
            newKey.fromJSON(c2)
            parm.setKeyframe(newKey)

#normalize values

toff = kfs[0].time()
tscale = kfs[1].time() -  kfs[0].time()]]></script>
  </tool>

  <tool name="LV_Add_Remove_Sticky_Note_Parent" label="LV Add/Remove Sticky Note Parent" icon="SHELF_parent">
    <script scriptType="python"><![CDATA[import stickyparent

stickyparent.linkNodes()]]></script>
  </tool>

  <tool name="LV_Flip_Ease_Y" label="LV Flip Ease Y" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou

pane_tab = hou.ui.paneTabUnderCursor()
anim_editor = pane_tab.graph()
keyframes = anim_editor.selectedKeyframes()

# Collect all of the selected keyframes into a dictionary with parms as keys
selected_keyframes = []
for parm in keyframes.keys():
    for key in keyframes[parm]:
        if parm not in selected_keyframes:
            selected_keyframes[parm] = []
        selected_keyframes[parm].append(key)

# Flip the values for each parameter's selected keyframes so that the minimum and maximum values swap
for parm in selected_keyframes.keys():
    keyframes = selected_keyframes[parm]
    min_value = min([key.value() for key in keyframes])
    max_value = max([key.value() for key in keyframes])
    for keyframe in keyframes:
        value = keyframe.value()
        new_value = min_value + max_value - value
        parm.setKeyframe(new_value, keyframe.frame())

# Refresh the animation editor to show the updated keyframe values
anim_editor.layout().setCurrentFrame(hou.frame())
]]></script>
  </tool>

  <tool name="Open_Project_Folder" label="Open Project Folder" icon="BUTTONS_folder">
    <script scriptType="python"><![CDATA[import projectFolder as pf

pf.openDir()]]></script>
  </tool>

  <tool name="LV_Wedge_Parm" label="LV Wedge Parm" icon="ROP_wedge">
    <script scriptType="python"><![CDATA[d = hou.ui.curDesktop()
ctx = d.paneTabUnderCursor()

p = hou.parmClipboardContents()[0]['path']

con = ctx.pwd()
t = con.type().name()

if t == 'topnet' or t == 'topnetmgr':

    try:
        sel = hou.selectedNodes()[-1]
        if sel.type().name() == 'wedge':
            w = sel
            count = w.parm('wedgeattributes').eval()
            w.parm('wedgeattributes').set(count+1)
            w.parm(f'exportchannel{count+1}').set(1)
            w.parm(f'channel{count+1}').set(p)
            w.parm(f'name{count+1}').set(p.split("/")[-1])
            w.parm('previewselection').set(1)

    except:
        w = con.createNode('wedge')
        w.setPosition(ctx.cursorPosition())
        w.parm('wedgeattributes').set(1)
        w.parm('exportchannel1').set(1)
        w.parm('channel1').set(p)
        w.parm('name1').set(p.split("/")[-1])
        w.parm('previewselection').set(1)

            ]]></script>
  </tool>

  <tool name="LV_Create_Named_Geo" label="LV Create Named Geo" icon="$LV/lv.svg">
    <script scriptType="python"><![CDATA[import LVUtils
from imp import reload
reload(LVUtils)
LVUtils.createNamedGeo(kwargs)]]></script>
  </tool>

  <tool name="LV_Make_Space" label="LV Make Space" icon="$LV/lv.svg">
    <script scriptType="python"><![CDATA[import LVUtils
from imp import reload
reload(LVUtils)
LVUtils.makeSpace(kwargs)]]></script>
  </tool>

  <tool name="Light_Visibility_Listener" label="Light Visibility Listener" icon="OBJ_light_area">
    <script scriptType="python"><![CDATA[import LVLightUtils
from imp import reload
reload(LVLightUtils)
LVLightUtils.listenForLight(hou.selectedItems())]]></script>
  </tool>

  <tool name="Updater" label="Updater" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import LVUpdater
from imp import reload
reload(LVUpdater)
# LVUpdater.update()
hou.ui.displayMessage("Not working yet, if you adjust this one you could break your LVTools install!", severity=hou.severityType.Warning)]]></script>
  </tool>
</shelfDocument>
